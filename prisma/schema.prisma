// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id          Int         @id @default(autoincrement())
  phone       String?     @unique
  email       String?     @unique
  name        String
  avatar      String?
  createAt    DateTime    @default(now())
  updateAt    DateTime    @updatedAt
  tokens      Token[]
  products    Product[]
  favorites   Favorite[]
  communities Community[]
  curious     Curious[]
  replies     Reply[]
}

model Token {
  id       Int      @id @default(autoincrement())
  payload  String   @unique
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Product {
  id          Int        @id @default(autoincrement())
  createAt    DateTime   @default(now())
  updateAt    DateTime   @updatedAt
  userId      Int
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  image       String
  name        String
  price       Int
  description String     @db.MediumText
  favorites   Favorite[]
}

model Favorite {
  id        Int      @id @default(autoincrement())
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    Int
  productId Int
}

model Community {
  id       Int       @id @default(autoincrement())
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  question String
  replies  Reply[]
  curious  Curious[]
}

model Reply {
  id          Int       @id @default(autoincrement())
  createAt    DateTime  @default(now())
  updateAt    DateTime  @updatedAt
  description String
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  community   Community @relation(fields: [communityId], references: [id])
  communityId Int
}

model Curious {
  id          Int       @id @default(autoincrement())
  createAt    DateTime  @default(now())
  updateAt    DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  community   Community @relation(fields: [communityId], references: [id])
  communityId Int
}
